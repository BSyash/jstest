1. sort array of string by ascending order and make first character capital. (compolsary)
I/p. [banana,apple,cat]
o/p:  [Apple, Banana, Cat]

2.Count vowels from paragraph
 I/p - "we are trainees"
 o/p: 7

3.count space after vowels from paragraph
I/p - "we are trainees"
O/p: 2
 
4.delete same lenght value string from array of string
I/p:  ["hetal","kiran","shila","bigscal","trainees","abcdefd"]
O/P: ["trainees"]

5.Add key-value pair in each object 
I/P:   ABC=[{name:"bigscal","age":25},{name:"trainees",age:"26"}]
O/P        ABC=[{name:"bigscal","age":25,surname:"company"},{name:"trainees",age:"26",surname:"bigscal"}]













// <!-- *********************************** -->
// Each person in Italy has an unique identifying ID code issued by the national tax office after the birth registration: the Fiscal Code (Codice Fiscale). Check the Resources tab for more info on this.

// Given an object containing the personal data of a person (name, surname, gender and date of birth) return the 11 code characters as a string following these steps:

// Generate 3 capital letters from the surname, if it has:

// At least 3 consonants then the first three consonants are used. (Newman -> NWM).
// Less than 3 consonants then vowels will replace missing characters in the same order they appear (Fox -> FXO | Hoe -> HOE).
// Less than three letters then "X" will take the third slot after the consonant and the vowel (Yu -> YUX).

// Generate 3 capital letters from the name, if it has:

// Exactly 3 consonants then consonants are used in the order they appear (Matt -> MTT).
// More than 3 consonants then first, third and fourth consonant are used (Samantha -> SNT | Thomas -> TMS).
// Less than 3 consonants then vowels will replace missing characters in the same order they appear (Bob -> BBO | Paula -> PLA).
// Less than three letters then "X" will take the the third slot after the consonant and the vowel (Al -> LAX).
// Generate 2 numbers, 1 letter and 2 numbers from date of birth and gender:

// Take the last two digits of the year of birth (1985 -> 85).
// Generate a letter corresponding to the month of birth (January -> A | December -> T) using the table for conversion included in the code.
// For males take the day of birth adding one zero at the start if is less than 10 (any 9th day -> 09 | any 20th day -> 20).
// For females take the day of birth and sum 40 to it (any 9th day -> 49 | any 20th day -> 60).

// const months = { 1: "A", 2: "B", 3: "C", 4: "D", 5: "E", 6: "H",
// 7: "L", 8: "M", 9: "P", 10: "R", 11: "S", 12: "T" }

// Examples
// fiscalCode({
//   name: "Matt",
//   surname: "Edabit",
//   gender: "M",
//   dob: "1/1/1900"
// }) ➞ "DBTMTT00A01"

// fiscalCode({
//   name: "Helen",
//   surname: "Yu",
//   gender: "F",
//   dob: "1/12/1950"
// }) ➞ "YUXHLN50T41"

// fiscalCode({
//   name: "Mickey",
//   surname: "Mouse",
//   gender: "M",
//   dob: "16/1/1928"
// }) ➞ "MSOMKY28A16"





















